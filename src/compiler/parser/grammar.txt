source -> definitions .

definitions -> definition definitions_1.
definitions_1 -> ";" definition definitions_1 |  .

definition -> type_definition .
definition -> function_definition .
definition -> variable_definition .

type_definition -> "typ" "id" ":" type .
type -> "id" .

type -> "logical" .
type -> "integer" .
type -> "string" .
type -> "arr" "[" "integer_const" "]" type .

function_definition -> "fun" "id" "(" parameters ")" ":" type "=" expression .

parameters -> parameter parameters_1.
parameters_1 -> "," parameter parameters_1 | .

parameter -> "id" ":" type .

expression -> logical_ior_expression expression_1.
expression_1 -> "{" "WHERE" definitions "}" | .

logical_ior_expression -> logical_and_expression logical_ior_expression_1 .
logical_ior_expression_1 -> "|" logical_and_expression logical_ior_expression_1 | .

logical_and_expression -> compare_expression logical_and_expression_1 .
logical_and_expression_1 -> "&" compare_expression logical_and_expression_1 | .

compare_expression -> additive_expr compare_expression_1 .
compare_expression_1 -> "==" additive_expr .
compare_expression_1 -> "!=" additive_expr .
compare_expression_1 -> "<=" additive_expr .
compare_expression_1 -> ">=" additive_expr .
compare_expression_1 -> ">" additive_expr .
compare_expression_1 -> "<" additive_expr .
compare_expression_1 -> .

additive_expr -> multiplicative_expression additive_expression_1 .
additive_expression_1 -> "+" multiplicative_expression additive_expression_1 | "-" multiplicative_expression additive_expression_1 | .

multiplicative_expression -> prefix_expression multiplicative_expression_1 .
multiplicative_expression_1 -> "*" prefix_expression multiplicative_expression_1 .
multiplicative_expression_1 -> "/" prefix_expression multiplicative_expression_1 .
multiplicative_expression_1 -> "%" prefix_expression multiplicative_expression_1 .
multiplicative_expression_1 -> .

prefix_expression -> "+" prefix_expression .
prefix_expression -> "-" prefix_expression .
prefix_expression -> "!" prefix_expression .
prefix_expression -> postfix_expression .

postfix_expression -> atom_expression postfix_expression_1.
postfix_expression_1 -> "[" expression "]" postfix_expression_1 | .

atom_expression -> "logical_const" .
atom_expression -> "integer_const" .
atom_expression -> "string_const" .
atom_expression -> "id" atom_expression_id .
atom_expression_id -> "(" expressions ")" | .

atom_expression_lbracket -> "{" atom_expression_lbracket_1 .
atom_expression_lbracket_1 -> expression "=" expression "}" .
atom_expression_lbracket_1 -> "if" expression "then" expression if_else "}" .
atom_expression_lbracket_1 -> "while" expression ":" expression "}" .
atom_expression_lbracket_1 -> "for" "id" "=" expression "," expression "," expression ":" expression "}" .

if_else -> else expression | .

atom_expression -> "(" expressions ")" .

expressions -> expression expressions_1.
expressions_1 -> "," expression expressions_1 | .

variable_definition -> "var" "id" ":" type .